/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package image_viewer;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author cstuser
 */
public class imageViewer extends javax.swing.JFrame {

    /**
     * Creates new form imageViewer
     */
    public imageViewer() {
        initComponents();
        originalPanel.setImage("images/lenna.png");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        originalPanel = new image_viewer.ImagePanel();
        modifiedPanel = new image_viewer.ImagePanel();
        applyButton = new javax.swing.JButton();
        GammaLabel = new javax.swing.JLabel();
        GrayScaleLabel = new javax.swing.JLabel();
        GrayCheckBox = new javax.swing.JCheckBox();
        gammaSlider = new javax.swing.JSlider();
        processingLabel = new javax.swing.JLabel();
        BoxFilterLabel = new javax.swing.JLabel();
        GuassianFilterLabel = new javax.swing.JLabel();
        EdgeDetectionFiltelLabel = new javax.swing.JLabel();
        GuassianFilterCheckBox = new javax.swing.JCheckBox();
        EdgeDetectionFilterCheckBox = new javax.swing.JCheckBox();
        BoxSlider = new javax.swing.JSlider();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        SharpenCheckBox = new javax.swing.JCheckBox();
        SharpenLabel = new javax.swing.JLabel();
        Menu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        QuitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout originalPanelLayout = new javax.swing.GroupLayout(originalPanel);
        originalPanel.setLayout(originalPanelLayout);
        originalPanelLayout.setHorizontalGroup(
            originalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );
        originalPanelLayout.setVerticalGroup(
            originalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout modifiedPanelLayout = new javax.swing.GroupLayout(modifiedPanel);
        modifiedPanel.setLayout(modifiedPanelLayout);
        modifiedPanelLayout.setHorizontalGroup(
            modifiedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );
        modifiedPanelLayout.setVerticalGroup(
            modifiedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        GammaLabel.setText("Gamma Correction");

        GrayScaleLabel.setText("Convert to Gray Scales:");

        gammaSlider.setMaximum(200);
        gammaSlider.setMinimum(1);
        gammaSlider.setValue(100);

        processingLabel.setText("Running...");

        BoxFilterLabel.setText("Box Filter:");

        GuassianFilterLabel.setText("Guassian  Filter:");

        EdgeDetectionFiltelLabel.setText("Edge Detection Filter:");

        EdgeDetectionFilterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeDetectionFilterCheckBoxActionPerformed(evt);
            }
        });

        BoxSlider.setMaximum(10);
        BoxSlider.setValue(0);

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        SharpenLabel.setText("Sharpen Filter:");

        File.setText("File");
        File.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        File.add(jMenuItem1);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText("Save");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        File.add(SaveMenuItem);

        QuitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        QuitMenu.setText("Quit");
        QuitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitMenuActionPerformed(evt);
            }
        });
        File.add(QuitMenu);

        Menu.add(File);

        jMenu2.setText("Edit");
        Menu.add(jMenu2);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(originalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifiedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(processingLabel)
                .addGap(241, 241, 241))
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(applyButton)
                        .addGap(208, 208, 208))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BoxFilterLabel)
                            .addComponent(GuassianFilterLabel)
                            .addComponent(GrayScaleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EdgeDetectionFiltelLabel)
                            .addComponent(SharpenLabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BoxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SharpenCheckBox)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(GuassianFilterCheckBox)
                                        .addComponent(EdgeDetectionFilterCheckBox)
                                        .addComponent(GrayCheckBox))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(GammaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gammaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(87, 87, 87))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modifiedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(originalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processingLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addGap(151, 151, 151))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BoxFilterLabel)
                            .addComponent(BoxSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(GuassianFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GuassianFilterCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EdgeDetectionFilterCheckBox)
                            .addComponent(EdgeDetectionFiltelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(GrayCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GrayScaleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SharpenCheckBox)
                            .addComponent(SharpenLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(GammaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(applyButton))
                            .addComponent(gammaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser();                                   //when open something, use a filter so only show images
        fc.setCurrentDirectory(new File("images"));
        FileNameExtensionFilter ff = new FileNameExtensionFilter("images", "jpg", "png", "BMP");
        fc.setFileFilter(ff);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("jpg files", "jpg"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("png files", "png"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("bmp files", "BMP"));

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {                         //if user selected a file, will set this as the file we operate with later, open 
            File file = fc.getSelectedFile();                                   //in the image panel.
            originalPanel.setImage(file.getAbsolutePath());
        } else {

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    BufferedImage output = null;
    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        try {
            output = originalPanel.getBufferedImage();                           //get a output image as the image from the original panel
            int counter = 0;
            
            double gamma = gammaSlider.getValue() / 100.0;
            int box = BoxSlider.getValue();

            if (box != 0) {
                counter++;
                output = ImageProcessing.applyBoxBlur(output, box);             //chagne image to boxblur accordint to the value in the scroller
            }

            if (GuassianFilterCheckBox.isSelected()) {
                counter++;
                output = ImageProcessing.applyGaussianBlur(output);             //change image to gaussian blur
            }

            if (EdgeDetectionFilterCheckBox.isSelected()) {                     //detect the image's edges
                counter++;
                output = ImageProcessing.applyEdge(output);
            }

            if (SharpenCheckBox.isSelected()) {                                 //sharpen the imgage
                counter++;
                output = ImageProcessing.applySharpen(output);
            }

            if (gamma != 1.0) {                                                 //if there is a change in gamma, apply that gamma to the image
                counter++;
                output = ImageProcessing.applyGammaCorrection(output, gamma);
            }

            if (GrayCheckBox.isSelected()) {
                counter++;
                output = ImageProcessing.convertToGreyScale(output);            //change image to gray scale
            }

            modifiedPanel.setImage(output);
            if(counter > 0){
                processingLabel.setText("Image Successfully Processed");
            }else {
                processingLabel.setText("Pleace Do Something!");
            }
        } catch (Exception e) {
            processingLabel.setText("Error! Process fail!");
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    private void EdgeDetectionFilterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeDetectionFilterCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EdgeDetectionFilterCheckBoxActionPerformed

    private void FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileActionPerformed

    }//GEN-LAST:event_FileActionPerformed

    private void QuitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_QuitMenuActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        JFileChooser fc = new JFileChooser();                                   //save the file in the selected place with a selected name
        fc.setCurrentDirectory(new File("images"));
        FileNameExtensionFilter ff = new FileNameExtensionFilter("images", "jpg", "png", "BMP");
        fc.setFileFilter(ff);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("jpg files", "jpg"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("png files", "png"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("bmp files", "BMP"));
        int returnValue = fc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                ImageIO.write(output, "png", file);
            } catch (Exception e) {
                processingLabel.setText("error!");
            }

        }
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        JFileChooser fc = new JFileChooser();                                   //open the selected file
        fc.setCurrentDirectory(new File("images"));
        FileNameExtensionFilter ff = new FileNameExtensionFilter("images", "jpg", "png", "BMP");
        fc.setFileFilter(ff);
        fc.addChoosableFileFilter(new FileNameExtensionFilter("jpg files", "jpg"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("png files", "png"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("bmp files", "BMP"));

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            originalPanel.setImage(file.getAbsolutePath());
        } else {

        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (BoxSlider.getValue() == 0 && !GuassianFilterCheckBox.isSelected() && !EdgeDetectionFilterCheckBox.isSelected() &&
                !SharpenCheckBox.isSelected() && gammaSlider.getValue() / 100.0 == 1.0 && !GrayCheckBox.isSelected() 
                && !processingLabel.getText().equals("Image Successfully Processed")) {
            processingLabel.setText("YOU HAVE NOT DONE ANYTHING!!");
        }else if (processingLabel.getText().equals("Image Successfully Processed")){
            JFileChooser fc = new JFileChooser();                                   //open the selceted file and put it in the image panel
            fc.setCurrentDirectory(new File("images"));
            FileNameExtensionFilter ff = new FileNameExtensionFilter("images", "jpg", "png", "BMP");
            fc.setFileFilter(ff);
            fc.addChoosableFileFilter(new FileNameExtensionFilter("jpg files", "jpg"));
            fc.addChoosableFileFilter(new FileNameExtensionFilter("png files", "png"));
            fc.addChoosableFileFilter(new FileNameExtensionFilter("bmp files", "BMP"));
            int returnValue = fc.showSaveDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                try {
                    ImageIO.write(output, "png", file);
                } catch (Exception e) {
                    processingLabel.setText("error!");
                }

            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(imageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(imageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(imageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(imageViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new imageViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BoxFilterLabel;
    private javax.swing.JSlider BoxSlider;
    private javax.swing.JLabel EdgeDetectionFiltelLabel;
    private javax.swing.JCheckBox EdgeDetectionFilterCheckBox;
    private javax.swing.JMenu File;
    private javax.swing.JLabel GammaLabel;
    private javax.swing.JCheckBox GrayCheckBox;
    private javax.swing.JLabel GrayScaleLabel;
    private javax.swing.JCheckBox GuassianFilterCheckBox;
    private javax.swing.JLabel GuassianFilterLabel;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenuItem QuitMenu;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JCheckBox SharpenCheckBox;
    private javax.swing.JLabel SharpenLabel;
    private javax.swing.JButton applyButton;
    private javax.swing.JSlider gammaSlider;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private image_viewer.ImagePanel modifiedPanel;
    private javax.swing.JButton openButton;
    private image_viewer.ImagePanel originalPanel;
    private javax.swing.JLabel processingLabel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
